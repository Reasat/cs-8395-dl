2020-01-14-18-41-36
train_hm.py
--------------------------------------------------------------------------------------------------------------------
agg: sum
alpha: 2.0
batchSize: 16
beta: 4
bottleneckFeatures: 0
dir_lf: D:\Data\cs-8395-dl
dir_project: C:\Users\Reasat\Projects\cs-8395-dl\Assignment_1_detection
encoder: unet-vgg11
epoch: 200
folderData: assignment1_data
lr: 0.001
resume_from: None
--------------------------------------------------------------------------------------------------------------------
creating directory to save model at D:\Data\cs-8395-dl\model\2020-01-14-18-41-36
loading images to RAM
train samples 105
loading images to RAM
validation samples 10
using pretrained (ImageNet) vgg11 as encoder
UNet11(
  (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  (encoder): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): ReLU(inplace)
    (2): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (3): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (4): ReLU(inplace)
    (5): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (6): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (7): ReLU(inplace)
    (8): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (9): ReLU(inplace)
    (10): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (11): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (12): ReLU(inplace)
    (13): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (14): ReLU(inplace)
    (15): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (16): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (17): ReLU(inplace)
    (18): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (19): ReLU(inplace)
    (20): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  )
  (relu): ReLU(inplace)
  (conv1): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (conv2): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (conv3s): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (conv3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (conv4s): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (conv4): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (conv5s): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (conv5): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (center): DecoderBlock(
    (block): Sequential(
      (0): ConvRelu(
        (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (activation): ReLU(inplace)
      )
      (1): ConvTranspose2d(512, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1))
      (2): ReLU(inplace)
    )
  )
  (dec5): DecoderBlock(
    (block): Sequential(
      (0): ConvRelu(
        (conv): Conv2d(768, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (activation): ReLU(inplace)
      )
      (1): ConvTranspose2d(512, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1))
      (2): ReLU(inplace)
    )
  )
  (dec4): DecoderBlock(
    (block): Sequential(
      (0): ConvRelu(
        (conv): Conv2d(768, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (activation): ReLU(inplace)
      )
      (1): ConvTranspose2d(512, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1))
      (2): ReLU(inplace)
    )
  )
  (dec3): DecoderBlock(
    (block): Sequential(
      (0): ConvRelu(
        (conv): Conv2d(384, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (activation): ReLU(inplace)
      )
      (1): ConvTranspose2d(256, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1))
      (2): ReLU(inplace)
    )
  )
  (dec2): DecoderBlock(
    (block): Sequential(
      (0): ConvRelu(
        (conv): Conv2d(192, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (activation): ReLU(inplace)
      )
      (1): ConvTranspose2d(128, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1))
      (2): ReLU(inplace)
    )
  )
  (dec1): ConvRelu(
    (conv): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (activation): ReLU(inplace)
  )
  (final): Conv2d(32, 1, kernel_size=(1, 1), stride=(1, 1))
)
train >>> epoch: 1/200, batch: 1/7, mean_loss: 3257869.0061
train >>> epoch: 1/200, batch: 2/7, mean_loss: 2375673.7536
train >>> epoch: 1/200, batch: 3/7, mean_loss: 1584920.6027
train >>> epoch: 1/200, batch: 4/7, mean_loss: 1189206.2311
train >>> epoch: 1/200, batch: 5/7, mean_loss: 951482.8772
train >>> epoch: 1/200, batch: 6/7, mean_loss: 793098.8850
train >>> epoch: 1/200, batch: 7/7, mean_loss: 679870.0955
valid >>> epoch: 1/200, mean_loss: 0.0002
criteria decreased from inf to 0.0002, saving best model at D:\Data\cs-8395-dl\model\2020-01-14-18-41-36\2020-01-14-18-41-36_unet-vgg11_best.pt
train >>> epoch: 2/200, batch: 1/7, mean_loss: 1178.9236
train >>> epoch: 2/200, batch: 2/7, mean_loss: 1621.0199
train >>> epoch: 2/200, batch: 3/7, mean_loss: 1670.1417
train >>> epoch: 2/200, batch: 4/7, mean_loss: 1473.6545
train >>> epoch: 2/200, batch: 5/7, mean_loss: 1650.4930
train >>> epoch: 2/200, batch: 6/7, mean_loss: 1621.0199
train >>> epoch: 2/200, batch: 7/7, mean_loss: 1484.1806
valid >>> epoch: 2/200, mean_loss: 0.0002
train >>> epoch: 3/200, batch: 1/7, mean_loss: 2063.1162
train >>> epoch: 3/200, batch: 2/7, mean_loss: 1621.0199
train >>> epoch: 3/200, batch: 3/7, mean_loss: 1473.6545
train >>> epoch: 3/200, batch: 4/7, mean_loss: 1399.9717
train >>> epoch: 3/200, batch: 5/7, mean_loss: 1591.5468
train >>> epoch: 3/200, batch: 6/7, mean_loss: 1621.0199
train >>> epoch: 3/200, batch: 7/7, mean_loss: 1484.1806
valid >>> epoch: 3/200, mean_loss: 0.0002
train >>> epoch: 4/200, batch: 1/7, mean_loss: 1473.6545
train >>> epoch: 4/200, batch: 2/7, mean_loss: 1473.6545
train >>> epoch: 4/200, batch: 3/7, mean_loss: 1571.8981
train >>> epoch: 4/200, batch: 4/7, mean_loss: 1473.6545
train >>> epoch: 4/200, batch: 5/7, mean_loss: 1532.6006
train >>> epoch: 4/200, batch: 6/7, mean_loss: 1670.1417
train >>> epoch: 4/200, batch: 7/7, mean_loss: 1502.6012
valid >>> epoch: 4/200, mean_loss: 0.0002
train >>> epoch: 5/200, batch: 1/7, mean_loss: 589.4618
train >>> epoch: 5/200, batch: 2/7, mean_loss: 1031.5581
train >>> epoch: 5/200, batch: 3/7, mean_loss: 1277.1672
train >>> epoch: 5/200, batch: 4/7, mean_loss: 1473.6545
train >>> epoch: 5/200, batch: 5/7, mean_loss: 1709.4392
train >>> epoch: 5/200, batch: 6/7, mean_loss: 1670.1417
train >>> epoch: 5/200, batch: 7/7, mean_loss: 1502.6012
valid >>> epoch: 5/200, mean_loss: 0.0002
train >>> epoch: 6/200, batch: 1/7, mean_loss: 2063.1162
train >>> epoch: 6/200, batch: 2/7, mean_loss: 2063.1162
train >>> epoch: 6/200, batch: 3/7, mean_loss: 1768.3854
train >>> epoch: 6/200, batch: 4/7, mean_loss: 1768.3854
train >>> epoch: 6/200, batch: 5/7, mean_loss: 1650.4930
train >>> epoch: 6/200, batch: 6/7, mean_loss: 1670.1417
train >>> epoch: 6/200, batch: 7/7, mean_loss: 1502.6012
valid >>> epoch: 6/200, mean_loss: 0.0002
train >>> epoch: 7/200, batch: 1/7, mean_loss: 1178.9236
train >>> epoch: 7/200, batch: 2/7, mean_loss: 1473.6545
train >>> epoch: 7/200, batch: 3/7, mean_loss: 1571.8981
train >>> epoch: 7/200, batch: 4/7, mean_loss: 1473.6545
train >>> epoch: 7/200, batch: 5/7, mean_loss: 1591.5468
train >>> epoch: 7/200, batch: 6/7, mean_loss: 1621.0199
train >>> epoch: 7/200, batch: 7/7, mean_loss: 1484.1806
valid >>> epoch: 7/200, mean_loss: 0.0002
train >>> epoch: 8/200, batch: 1/7, mean_loss: 2063.1162
train >>> epoch: 8/200, batch: 2/7, mean_loss: 1768.3854
train >>> epoch: 8/200, batch: 3/7, mean_loss: 1768.3854
train >>> epoch: 8/200, batch: 4/7, mean_loss: 1547.3372
train >>> epoch: 8/200, batch: 5/7, mean_loss: 1709.4392
train >>> epoch: 8/200, batch: 6/7, mean_loss: 1817.5072
train >>> epoch: 8/200, batch: 7/7, mean_loss: 1557.8633
valid >>> epoch: 8/200, mean_loss: 0.0002
train >>> epoch: 9/200, batch: 1/7, mean_loss: 1473.6545
train >>> epoch: 9/200, batch: 2/7, mean_loss: 1768.3854
train >>> epoch: 9/200, batch: 3/7, mean_loss: 1670.1417
train >>> epoch: 9/200, batch: 4/7, mean_loss: 1694.7026
train >>> epoch: 9/200, batch: 5/7, mean_loss: 1650.4930
train >>> epoch: 9/200, batch: 6/7, mean_loss: 1621.0199
train >>> epoch: 9/200, batch: 7/7, mean_loss: 1484.1806
valid >>> epoch: 9/200, mean_loss: 0.0002
train >>> epoch: 10/200, batch: 1/7, mean_loss: 1178.9236
train >>> epoch: 10/200, batch: 2/7, mean_loss: 1326.2890
train >>> epoch: 10/200, batch: 3/7, mean_loss: 1473.6545
train >>> epoch: 10/200, batch: 4/7, mean_loss: 1326.2890
train >>> epoch: 10/200, batch: 5/7, mean_loss: 1591.5468
train >>> epoch: 10/200, batch: 6/7, mean_loss: 1571.8981
train >>> epoch: 10/200, batch: 7/7, mean_loss: 1465.7599
valid >>> epoch: 10/200, mean_loss: 0.0002
train >>> epoch: 11/200, batch: 1/7, mean_loss: 1768.3854
train >>> epoch: 11/200, batch: 2/7, mean_loss: 2063.1162
train >>> epoch: 11/200, batch: 3/7, mean_loss: 2063.1162
train >>> epoch: 11/200, batch: 4/7, mean_loss: 1842.0681
train >>> epoch: 11/200, batch: 5/7, mean_loss: 1709.4392
train >>> epoch: 11/200, batch: 6/7, mean_loss: 1719.2635
train >>> epoch: 11/200, batch: 7/7, mean_loss: 1521.0219
valid >>> epoch: 11/200, mean_loss: 0.0002
